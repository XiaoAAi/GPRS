2017-12-12 21:48
1、建立DS18B20工程基本结构，从现在开始进行DS18B20的实际操作。
2、DS18B20数据手册在搜狗浏览器栏目，细节操作在桌面。

2017-12-13 17:55
1、已完成对DS18B20的针脚定义，还有一系列的初步函数定义。
2、时间要求：
	经过精确的计算则【(47+(N-1)*11)/48 us】
	如果(us*48-47)/11+1
21:50
3、发现通过KDS进行时间的测试没有规则，所以不好进行统一的时间规划，所以决定放弃，就算开始也会不算太精准，有3us的误差。
4、今天处理了DS18B20的上拉下拉输入输出还有输入值等定量，定义了函数：
代码：
void ds18b20_Init(void);			//初始化DS18B20为GPIO口和输出
uint_8 ds18b20_Reset(void);			//DS18B20的复位操作
void ds18b20_Write(uint_16 data);	//DS18B20的写操作
uint_8 ds18b20_Read();				//DS18B20的读操作
由于时间关系，读操作还没有完成，准备明天进行！
【一定基于复位操作进行，将复位操作ds18b20_Reset(void);定义为又返回值的函数，为了验证复位操作失败，而重新进行继续复位，减少了不必要的时间浪费
明天的读操作也一定如此！！切记读操作还有符号位，一定将正数和负数分离开来】
今天大概构造了这么多，一切正常，明天继续。。。。。。。。。。。。。。。。

2017-12-14  19:45
1、通过昨天的思索，可能针对
代码：if(ds18b20_Reset()){				//如果复位成功执行一下语句
可能出现多次的重复复位，造成写入的失败！！！！！！！！！！！！！！！！！
！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！!已经改正!
2、基本函数已经构造完毕，但是还是出现乱码行为，温度读取都是一，所以一直都是最大值还需要进一步的验证和检查！
22:10
3、通过查看代码，基本上属于正常，但是还没有通过计算，所以不能进行正确判断，但是唯一可以肯定的是ds18b20_Reset()复位操作是正确的！
4、但是像写入和读出操作必须经过测试才能过通过相应的修改。
5、下一步，测试写入和读出操作的时序时间，，，全部得出。。。。。。。。。。。。。！！！！！！！！！！
虽没有得出结果，但是有了下一步的计划操作？？？？？？？？？？？？？？？？？？？？？？？？？？

2017-12-16 11:06
1、通过DS18B20的测试程序，一切没有错误，是因为将写入参数读取暂存器中的数的命令写错，应该是0xBE，才能实现暂存器的读取。
2、通过时序图反复进行验证推敲，更改了写入和读入的一些关键性错误，比如每次时序图都应该先置高，或者在读数据的时候，应该在读入之后在执行移位操作，这样仅仅移动七次（必须）
3、还有通过之前的了解，发现起始OLED仅仅需要GPIO口即可，不需要一些时钟或者什么SPI什么的，所以将OLED引脚改为：
	代码：
		#define  OLED_SCL_PIN	(PTB_NUM | 16)
		#define  OLED_SDA_PIN	(PTB_NUM | 10)
		#define  OLED_RST_PIN	(PTB_NUM | 8)
		#define  OLED_DC_PIN	(PTB_NUM | 2)
		#define  OLED_CS_PIN	(PTB_NUM | 0)
4、发现，如果使用小灯已定义的引脚会使OLED显示屏不稳定，在传输显示的时候出现屏幕乱的现象。
5、针对于DS18B20的设计操作，已经基本完成，唯一的不足就是无法显示小数以后的温度，大概想想好像也不需要！！
	总结：通过本次实验，明白了针对于时序图的重要性，根据时序图就可以进行对其他的传感器进行操作，但是必须把握好延时函数，针对于延时函数，必须要精准，那么做传感器就不成问题，
		更要学会有耐心，一步一步的进行验证分析，以及其他的时序测试操作！
6、可以进行下一步骤的操作了，及UART的串口全部实现。。。。。。。。。。。。。。。。。。。

20180522 15:08
永远记得，DS18B20不要用输入表示释放总线，其实，输入ds18b20_In();不是释放总线，需要在外部接上拉电阻才可能有效，但是KL25没有上拉电阻，所以，不能直接用
ds18b20_In();输入表示释放总线。一定要记得，必须用ds18b20_High();			//拉高（释放总线）表示，KL25所有的板子才能适用，，还有，这个大的长的DS18B20是可以进行数据传输的！（不用质疑他）

还有就是OLED引脚对应：
		D0	(PTB_NUM | 16)
		D1      (PTB_NUM | 10)
		RST	(PTB_NUM | 8)
		DS	(PTB_NUM | 2)
		CS	(PTB_NUM | 0)