//=====================================================================
//文件名称：tpm.h
//功能概要：tpm底层驱动构件源文件
//版权所有：苏州大学NXP嵌入式中心(sumcu.suda.edu.cn)
//更新记录：2013-6-20  V1.0，2013-6-10  V3.0
//备    注：SD-FSL-KL25开发板有TPM0、TPM1和TPM2共3个TPM模块，每个模块又有
//          若干通道，都可以配置产生边沿对齐或是中心对齐的PWM信号。
//前提：PTB9、PTB18、PTB19已分配给三色灯,PTE0、PTE1分配给UART1,PTE22、PTE23分配给UART2
//PTA0、PTA3、PTA20分配给调试接口使用
//          每个通道的具体引脚分配如下：
//             通道                     引脚名(复用编号)
//             TPM0_CH0      [PTA3(3)]、PTC1(4)、PTD0(4)、PTE24(3)
//             TPM0_CH1      PTA4(3)、PTC2(4)、PTD1(4)、PTE25(3)
//             TPM0_CH2      PTA5(3)、PTC3(4)、PTD2(4)、PTE29(3)
//             TPM0_CH3      PTC4(4)、PTD3(4) 、PTE30(3)
//             TPM0_CH4      PTC8(3)、PTD4(4)、PTE31(3)
//             TPM0_CH5      [PTA0(3)]、PTC9(3)、PTD5(4)
//
//             TPM1_CH0      PTA12(3)、PTB0(3)、PTE20(3)
//             TPM1_CH1      PTA13(3)、PTB1(3)、PTE21(3)
//
//             TPM2_CH0      PTA1(3)、PTB2(3)、[PTB18(3)]、[PTE22(3)]
//             TPM2_CH1      PTA2(3)、PTB3(3)、[PTB19(3)]、[PTE23(3)]
//=====================================================================
#ifndef _TPM_H
#define _TPM_H

#include "common.h"
#include "gpio.h"

//TPM模块号宏定义
#define TPM_0    0
#define TPM_1    1
#define TPM_2    2

//输入捕捉边沿获取模式宏定义
#define CAP_UP      0
#define CAP_DOWN    1
#define CAP_DOUBLE  2
//输出比较模式选择宏定义
#define CMP_REV   0
#define CMP_LOW   1
#define CMP_HIGH  2
//PWM对齐方式宏定义:边沿对齐、中心对齐
#define PWM_EDGE   0
#define PWM_CENTER 1
//PWM极性选择宏定义：正极性、负极性
#define PWM_PLUS   0
#define PWM_MINUS  1

//注:通过展开以下宏定义修改宏定义值可选择多引脚通道的一个引脚
//-------------------TPM0通道引脚选择---------------------
//TPM0通道0引脚：
#define TPM0_CH0  (PTC_NUM|1) //(PORTA|3),(PORTC|1),(PORTD|0),(PORTE|24)
//TPM0通道1引脚
#define TPM0_CH1  (PTA_NUM|4) //(PORTA|4),(PORTC|2),(PORTD|1),(PORTE|25)
//TPM0通道2引脚
#define TPM0_CH2  (PTA_NUM|5) //(PORTA|5),(PORTC|3),(PORTD|2),(PORTE|29)
//TPM0通道3引脚
#define TPM0_CH3  (PTC_NUM|4) //(PORTC|4),(PORTD|3),(PORTE|30)
//TPM0通道4引脚
#define TPM0_CH4  (PTC_NUM|8) //(PORTC|8),(PORTD|4),(PORTE|31)
//TPM0通道5引脚
#define TPM0_CH5  (PTA_NUM|0) //(PORTA|0),(PORTC|9),(PORTD|5)
//-------------------------------------------------

//---------------TPM1通道引脚选择----------------------
//TPM1通道0引脚
#define TPM1_CH0  (PTA_NUM|12)  //(PORTA|12),(PORTB|0),(PORTE|20)
//TPM1通道1引脚
#define TPM1_CH1  (PTA_NUM|13)  //(PORTA|13),(PORTB|1),(PORTE|21)
//--------------------------------------------------

//------------------TPM2通道引脚选择-------------------
//TPM2通道0引脚
#define TPM2_CH0  (PTA_NUM|1)  //(PORTA|1),(PORTB|2)
//TPM2通道1引脚
#define TPM2_CH1  (PTA_NUM|2)  //(PORTA|2),(PORTB|3)
//---------------------------------------------------

//===================================================================
//函数名称：tpm_timer_init
//功能概要：tpm模块初始化，设置计数器频率f及计数器溢出时间MOD_Value。
//参数说明：TPM_i：模块号，使用宏定义：TPM_0、TPM_1、TPM_2
//       f：单位：Khz，取值：375、750、1500、3000、6000、12000、24000、48000
//       MOD_Value：单位：ms，范围取决于计数器频率与计数器位数（16位）
//函数返回：无
//===================================================================
void tpm_timer_init(uint_16 TPM_i,uint32_t f,float MOD_Value);

//===================================================================
//函数名称：pwm_init
//功能概要：pwm模块初始化。
//参数说明：tpmx_Chy：模块通道号（例：TPM_CH0表示为TPM0模块第0通道）
//       duty：占空比：0.0~100.0对应0%~100%
//         Align：PWM计数对齐方式（有宏定义常数可用）
//       pol：PWM极性选择（有宏定义常数可用）
//函数返回：无
//===================================================================
void pwm_init(uint_16 tpmx_Chy,float duty,uint_8 Align,uint_8 pol);

//=====================================================================
//函数名称：pwm_update
//功能概要：tpmx模块Chy通道的PWM更新
//参数说明：tpmx_Chy：模块通道号（例：TPM_CH0表示为TPM0模块0通道）
//       duty：占空比：0.0~100.0对应0%~100%
//函数返回：无
//=====================================================================
void pwm_update(uint_16 tpmx_Chy,float duty);

//===================================================================
//函数名称：incap_init
//功能概要：incap模块初始化。
//参数说明：tpmx_Chy：模块通道号（例：TPM_CH0表示为TPM0模块第0通道）
//       capmode：输入捕捉模式（上升沿、下降沿、双边沿），有宏定义常数使用
//函数返回：无
//===================================================================
void incap_init(uint_16 tpmx_Chy,uint_8 capmode);

//=====================================================================
//函数名称：tpm_get_capvalue
//功能概要：获取tpmx模块Chy通道的计数器当前值
//参数说明：tpmx_Chy：模块通道号（例：TPM_CH0表示为TPM0模块第0通道）
//函数返回：tpmx模块Chy通道的计数器当前值
//=====================================================================
uint_16 tpm_get_capvalue(uint_16 tpmx_Chy);

//===================================================================
//函数名称：outcompare_init
//功能概要：outcompare模块初始化。
//参数说明：tpmx_Chy：模块通道号（例：TPM_CH0表示为TPM0模块第0通道）
//        comduty：输出比较电平翻转位置占总周期的比例：0.0~100.0对应0%~100%
//        cmpmode：输出比较模式（翻转电平、强制低电平、强制高电平）,有宏定义常数使用
//函数返回：无
//===================================================================
void outcompare_init(uint_16 tpmx_Chy,float comduty,uint_8 cmpmode);

//===================================================================
//函数名称：tpm_enable_int
//功能概要：使能tpm模块中断。
//参数说明：TPM_i：模块号，使用宏定义：TPM_0、TPM_1、TPM_2
//函数返回：无
//===================================================================
void tpm_enable_int(uint_8 TPM_i);

//===================================================================
//函数名称：tpm_disable_int
//功能概要：禁用tpm模块中断。
//参数说明：TPM_i：模块号，使用宏定义：TPM_0、TPM_1、TPM_2
//函数返回：无
//===================================================================
void tpm_disable_int(uint_8 TPM_i);

//===================================================================
//函数名称：tpm_get_int
//功能概要：获取TPM模块中断标志
//参数说明：TPM_i：模块号，使用宏定义：TPM_0、TPM_1、TPM_2
//函数返回：中断标志 1=有中断产生;0=无中断产生
//===================================================================
uint_8 tpm_get_int(uint_8 TPM_i);

//===================================================================
//函数名称：tpm_chl_get_int
//功能概要：获取TPM通道中断标志
//参数说明：TPM_i：模块号，使用宏定义：TPM_0、TPM_1、TPM_2，TPMC_i：0-5通道
//函数返回：中断标志 1=有中断产生;0=无中断产生
//===================================================================
uint_8 tpm_chl_get_int(uint_8 TPM_i,uint_8 TPMC_i);

//===================================================================
//函数名称：tpm_clear_int
//功能概要：清除TPM中断标志
//参数说明：TPM_i：模块号，使用宏定义：TPM_0、TPM_1、TPM_2
//函数返回：清除中断标志位
//===================================================================
void tpm_clear_int(uint_8 TPM_i);

//===================================================================
//函数名称：tpm_clear_chl_int
//功能概要：清除TPM通道中断标志
//参数说明：TPM_i：模块号，使用宏定义：TPM_0、TPM_1、TPM_2，TPMC_i：0-5通道
//函数返回：清除TPM通道中断标志位
//===================================================================
void tpm_clear_chl_int(uint_8 TPM_i,uint_8 TPMC_i);

#endif 

//=====================================================================
//声明：
//（1）我们开发的源代码，在本中心提供的硬件系统测试通过，真诚奉献给社会，不足之处，
//     欢迎指正。
//（2）对于使用非本中心硬件系统的用户，移植代码时，请仔细根据自己的硬件匹配。
//
//苏州大学嵌入式中心  0512-65214835  http://sumcu.suda.edu.cn
